/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */

const deployedContracts = {
  97: {
    USDB: {
      address: "0x11315860479a2f39d6346c2ae6099f15cb6b890b",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "defaultAdmin",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "DEFAULT_ADMIN_ROLE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "DOMAIN_SEPARATOR",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "eip712Domain",
          inputs: [],
          outputs: [
            {
              name: "fields",
              type: "bytes1",
              internalType: "bytes1",
            },
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "version",
              type: "string",
              internalType: "string",
            },
            {
              name: "chainId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "verifyingContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "extensions",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getRoleAdmin",
          inputs: [
            {
              name: "role",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "grantRole",
          inputs: [
            {
              name: "role",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "hasRole",
          inputs: [
            {
              name: "role",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nonces",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "permit",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "v",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "r",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "s",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "renounceRole",
          inputs: [
            {
              name: "role",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "callerConfirmation",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "revokeRole",
          inputs: [
            {
              name: "role",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "supportsInterface",
          inputs: [
            {
              name: "interfaceId",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "EIP712DomainChanged",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "RoleAdminChanged",
          inputs: [
            {
              name: "role",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "previousAdminRole",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "newAdminRole",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "RoleGranted",
          inputs: [
            {
              name: "role",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "account",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "sender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "RoleRevoked",
          inputs: [
            {
              name: "role",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "account",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "sender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "AccessControlBadConfirmation",
          inputs: [],
        },
        {
          type: "error",
          name: "AccessControlUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "neededRole",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
        },
        {
          type: "error",
          name: "ECDSAInvalidSignature",
          inputs: [],
        },
        {
          type: "error",
          name: "ECDSAInvalidSignatureLength",
          inputs: [
            {
              name: "length",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ECDSAInvalidSignatureS",
          inputs: [
            {
              name: "s",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC2612ExpiredSignature",
          inputs: [
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC2612InvalidSigner",
          inputs: [
            {
              name: "signer",
              type: "address",
              internalType: "address",
            },
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidAccountNonce",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "currentNonce",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidShortString",
          inputs: [],
        },
        {
          type: "error",
          name: "StringTooLong",
          inputs: [
            {
              name: "str",
              type: "string",
              internalType: "string",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        approve:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        balanceOf:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        decreaseAllowance: "src/gnosis/ERC20.sol",
        increaseAllowance: "src/gnosis/ERC20.sol",
        totalSupply:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        transfer:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        DEFAULT_ADMIN_ROLE:
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        getRoleAdmin:
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        grantRole:
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        hasRole:
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        renounceRole:
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        revokeRole:
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        supportsInterface:
          "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        DOMAIN_SEPARATOR:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        decimals:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        eip712Domain:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        nonces:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        permit:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        symbol:
          "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
      },
    },
    ConditionalTokens: {
      address: "0xc24ac7a95eab2169a8c7eaf1d63e6f8a2c13fb6d",
      abi: [
        {
          type: "constructor",
          inputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "balanceOfBatch",
          inputs: [
            {
              name: "accounts",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "ids",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getCollectionId",
          inputs: [
            {
              name: "parentCollectionId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "conditionId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "indexSet",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getConditionId",
          inputs: [
            {
              name: "oracle",
              type: "address",
              internalType: "address",
            },
            {
              name: "questionId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "outcomeSlotCount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getOutcomeSlotCount",
          inputs: [
            {
              name: "conditionId",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPositionId",
          inputs: [
            {
              name: "collateralToken",
              type: "address",
              internalType: "contract IERC20",
            },
            {
              name: "collectionId",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "isApprovedForAll",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mergePositions",
          inputs: [
            {
              name: "collateralToken",
              type: "address",
              internalType: "contract IERC20",
            },
            {
              name: "parentCollectionId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "conditionId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "partition",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "payoutDenominator",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "payoutNumerators",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "prepareCondition",
          inputs: [
            {
              name: "oracle",
              type: "address",
              internalType: "address",
            },
            {
              name: "questionId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "outcomeSlotCount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "redeemPositions",
          inputs: [
            {
              name: "collateralToken",
              type: "address",
              internalType: "contract IERC20",
            },
            {
              name: "parentCollectionId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "conditionId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "indexSets",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "reportPayouts",
          inputs: [
            {
              name: "questionId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "payouts",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "safeBatchTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "ids",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "values",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "safeTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setApprovalForAll",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "splitPosition",
          inputs: [
            {
              name: "collateralToken",
              type: "address",
              internalType: "contract IERC20",
            },
            {
              name: "parentCollectionId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "conditionId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "partition",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "supportsInterface",
          inputs: [
            {
              name: "interfaceId",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "uri",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "ApprovalForAll",
          inputs: [
            {
              name: "account",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ConditionPreparation",
          inputs: [
            {
              name: "conditionId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "oracle",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "questionId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "outcomeSlotCount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ConditionResolution",
          inputs: [
            {
              name: "conditionId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "oracle",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "questionId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "outcomeSlotCount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "payoutNumerators",
              type: "uint256[]",
              indexed: false,
              internalType: "uint256[]",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PayoutRedemption",
          inputs: [
            {
              name: "redeemer",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "collateralToken",
              type: "address",
              indexed: true,
              internalType: "contract IERC20",
            },
            {
              name: "parentCollectionId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "conditionId",
              type: "bytes32",
              indexed: false,
              internalType: "bytes32",
            },
            {
              name: "indexSets",
              type: "uint256[]",
              indexed: false,
              internalType: "uint256[]",
            },
            {
              name: "payout",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PositionSplit",
          inputs: [
            {
              name: "stakeholder",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "collateralToken",
              type: "address",
              indexed: false,
              internalType: "contract IERC20",
            },
            {
              name: "parentCollectionId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "conditionId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "partition",
              type: "uint256[]",
              indexed: false,
              internalType: "uint256[]",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PositionsMerge",
          inputs: [
            {
              name: "stakeholder",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "collateralToken",
              type: "address",
              indexed: false,
              internalType: "contract IERC20",
            },
            {
              name: "parentCollectionId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "conditionId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "partition",
              type: "uint256[]",
              indexed: false,
              internalType: "uint256[]",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "TransferBatch",
          inputs: [
            {
              name: "operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "ids",
              type: "uint256[]",
              indexed: false,
              internalType: "uint256[]",
            },
            {
              name: "values",
              type: "uint256[]",
              indexed: false,
              internalType: "uint256[]",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "TransferSingle",
          inputs: [
            {
              name: "operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "URI",
          inputs: [
            {
              name: "value",
              type: "string",
              indexed: false,
              internalType: "string",
            },
            {
              name: "id",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC1155InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC1155InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC1155InvalidArrayLength",
          inputs: [
            {
              name: "idsLength",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "valuesLength",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC1155InvalidOperator",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC1155InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC1155InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC1155MissingApprovalForAll",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        balanceOf:
          "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol",
        balanceOfBatch:
          "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol",
        isApprovedForAll:
          "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol",
        safeBatchTransferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol",
        safeTransferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol",
        setApprovalForAll:
          "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol",
        supportsInterface:
          "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol",
        uri: "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol",
      },
    },
    FixedProductMarketMakerFactory: {
      address: "0x717a3aa19f3217bb56a83ad7ec57614e977f6413",
      abi: [
        {
          type: "constructor",
          inputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "cloneConstructor",
          inputs: [
            {
              name: "consData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "createFixedProductMarketMaker",
          inputs: [
            {
              name: "conditionalTokens",
              type: "address",
              internalType: "contract ConditionalTokens",
            },
            {
              name: "collateralToken",
              type: "address",
              internalType: "contract IERC20",
            },
            {
              name: "conditionIds",
              type: "bytes32[]",
              internalType: "bytes32[]",
            },
            {
              name: "fee",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract FixedProductMarketMaker",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "implementationMaster",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract FixedProductMarketMaker",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "CloneCreated",
          inputs: [
            {
              name: "target",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "clone",
              type: "address",
              indexed: false,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "FPMMBuy",
          inputs: [
            {
              name: "buyer",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "investmentAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "feeAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "outcomeIndex",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "outcomeTokensBought",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "FPMMFundingAdded",
          inputs: [
            {
              name: "funder",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amountsAdded",
              type: "uint256[]",
              indexed: false,
              internalType: "uint256[]",
            },
            {
              name: "sharesMinted",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "FPMMFundingRemoved",
          inputs: [
            {
              name: "funder",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amountsRemoved",
              type: "uint256[]",
              indexed: false,
              internalType: "uint256[]",
            },
            {
              name: "collateralRemovedFromFeePool",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "sharesBurnt",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "FPMMSell",
          inputs: [
            {
              name: "seller",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "returnAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "feeAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "outcomeIndex",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "outcomeTokensSold",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "FixedProductMarketMakerCreation",
          inputs: [
            {
              name: "creator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "fixedProductMarketMaker",
              type: "address",
              indexed: false,
              internalType: "contract FixedProductMarketMaker",
            },
            {
              name: "conditionalTokens",
              type: "address",
              indexed: true,
              internalType: "contract ConditionalTokens",
            },
            {
              name: "collateralToken",
              type: "address",
              indexed: true,
              internalType: "contract IERC20",
            },
            {
              name: "conditionIds",
              type: "bytes32[]",
              indexed: false,
              internalType: "bytes32[]",
            },
            {
              name: "fee",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
      ],
      inheritedFunctions: {
        cloneConstructor: "src/gnosis/ConstructedCloneFactory.sol",
      },
    },
    ChallengeManager: {
      address: "0x68a430e922d402171a4a9d0dffda6daccdfda96d",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_arenaStartTime",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_oracle",
              type: "address",
              internalType: "address",
            },
            {
              name: "_conditionalTokens",
              type: "address",
              internalType: "address",
            },
            {
              name: "_collateralToken",
              type: "address",
              internalType: "address",
            },
            {
              name: "_fixedProductMarketMakerFactory",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "CHALLENGE_DURATION",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "MAX_CHALLENGERS",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "arenaStartTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "collateralToken",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IERC20",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "conditionalTokens",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IConditionalTokens",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "currentChallengeId",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "fixedProductMarketMakerFactory",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IFixedProductMarketMakerFactory",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getChallenge",
          inputs: [
            {
              name: "challengeId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct ChallengeManager.Challenge",
              components: [
                {
                  name: "id",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "startingTime",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "endingTime",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "winnerTrackId",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "marketMaker",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "gameId",
                  type: "bytes32",
                  internalType: "bytes32",
                },
                {
                  name: "conditionId",
                  type: "bytes32",
                  internalType: "bytes32",
                },
                {
                  name: "positionIds",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "partitions",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "collectionIds",
                  type: "bytes32[]",
                  internalType: "bytes32[]",
                },
                {
                  name: "players",
                  type: "address[]",
                  internalType: "address[]",
                },
                {
                  name: "tracks",
                  type: "tuple[]",
                  internalType: "struct ChallengeManager.Track[]",
                  components: [
                    {
                      name: "id",
                      type: "uint256",
                      internalType: "uint256",
                    },
                    {
                      name: "trackName",
                      type: "string",
                      internalType: "string",
                    },
                    {
                      name: "artist",
                      type: "string",
                      internalType: "string",
                    },
                    {
                      name: "cid",
                      type: "string",
                      internalType: "string",
                    },
                  ],
                },
                {
                  name: "criteria",
                  type: "string",
                  internalType: "string",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getCurrentChallenge",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct ChallengeManager.Challenge",
              components: [
                {
                  name: "id",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "startingTime",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "endingTime",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "winnerTrackId",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "marketMaker",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "gameId",
                  type: "bytes32",
                  internalType: "bytes32",
                },
                {
                  name: "conditionId",
                  type: "bytes32",
                  internalType: "bytes32",
                },
                {
                  name: "positionIds",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "partitions",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "collectionIds",
                  type: "bytes32[]",
                  internalType: "bytes32[]",
                },
                {
                  name: "players",
                  type: "address[]",
                  internalType: "address[]",
                },
                {
                  name: "tracks",
                  type: "tuple[]",
                  internalType: "struct ChallengeManager.Track[]",
                  components: [
                    {
                      name: "id",
                      type: "uint256",
                      internalType: "uint256",
                    },
                    {
                      name: "trackName",
                      type: "string",
                      internalType: "string",
                    },
                    {
                      name: "artist",
                      type: "string",
                      internalType: "string",
                    },
                    {
                      name: "cid",
                      type: "string",
                      internalType: "string",
                    },
                  ],
                },
                {
                  name: "criteria",
                  type: "string",
                  internalType: "string",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getTrack",
          inputs: [
            {
              name: "trackId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct ChallengeManager.Track",
              components: [
                {
                  name: "id",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "trackName",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "artist",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "cid",
                  type: "string",
                  internalType: "string",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getWinner",
          inputs: [
            {
              name: "challengeId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct ChallengeManager.Track",
              components: [
                {
                  name: "id",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "trackName",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "artist",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "cid",
                  type: "string",
                  internalType: "string",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "joinChallenge",
          inputs: [
            {
              name: "trackName",
              type: "string",
              internalType: "string",
            },
            {
              name: "artist",
              type: "string",
              internalType: "string",
            },
            {
              name: "cid",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "numberOfChallenges",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "oracle",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "selectWinner",
          inputs: [
            {
              name: "challengeId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "trackId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "criteria",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "JoinedChallenge",
          inputs: [
            {
              name: "challengeId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "trackId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "player",
              type: "address",
              indexed: false,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "WinnerSelected",
          inputs: [
            {
              name: "challengeId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "trackId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
      ],
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts;
